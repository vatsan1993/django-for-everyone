this project is being done on python anywhere

https://www.dj4e.com/assn/dj4e_install.md
https://docs.djangoproject.com/en/4.2/intro/tutorial01/
https://www.dj4e.com/assn/dj4e_errors.md
Use the python version alternate tutorial or check the python available in /usr/bin 
cd /usr/bin
ls

note: this is using venvwrapper module to create a virtual environment.

Alternate tutorial:
https://help.pythonanywhere.com/pages/FollowingTheDjangoTutorial/

sample codes: https://github.com/csev/dj4e-samples


commands:
# setup virtual env and activate it
python -m venv .venv
.venv\Scripts\activate

# install Django
pip install django==version

# creating a project
django-admin startproject project_name # note: we cannot have a space or a minus for the project name

# creating an app
cd project_name # jump inside project folder
python manage.py startapp app_name

# getting help
python manage.py # this will show all sub commands available for us

# remember to add the app to the settings's installed apps for the models in the app to work
# we need to include the config class that is available in the app.py file.


### Working with models and one to many relationship
https://docs.djangoproject.com/en/4.2/intro/tutorial02/


# check for mistakes
python manage.py check

# create migration files:
python manage.py makemigrations

# check the sql query that will run on a specific migration
python manage.py sqlmigrate polls 0001

# migrating databases
python manage.py migrate

Note: if you get any errors, delete the database file and the migrations and restart again


# Django shell
python manage.py shell


>>> from polls.models import Choice, Question

# Make sure our __str__() addition worked.
>>> Question.objects.all()
<QuerySet [<Question: What's up?>]>

# Django provides a rich database lookup API that's entirely driven by
# keyword arguments.
>>> Question.objects.filter(id=1)
<QuerySet [<Question: What's up?>]>
>>> Question.objects.filter(question_text__startswith="What")
<QuerySet [<Question: What's up?>]>

# Get the question that was published this year.
>>> from django.utils import timezone
>>> current_year = timezone.now().year
>>> Question.objects.get(pub_date__year=current_year)
<Question: What's up?>

# Request an ID that doesn't exist, this will raise an exception.
>>> Question.objects.get(id=2)
Traceback (most recent call last):
    ...
DoesNotExist: Question matching query does not exist.

# Lookup by a primary key is the most common case, so Django provides a
# shortcut for primary-key exact lookups.
# The following is identical to Question.objects.get(id=1).
>>> Question.objects.get(pk=1)
<Question: What's up?>

# Make sure our custom method worked.
>>> q = Question.objects.get(pk=1)
>>> q.was_published_recently()
True

# Give the Question a couple of Choices. The create call constructs a new
# Choice object, does the INSERT statement, adds the choice to the set
# of available choices and returns the new Choice object. Django creates
# a set to hold the "other side" of a ForeignKey relation
# (e.g. a question's choice) which can be accessed via the API.
>>> q = Question.objects.get(pk=1)

# Display any choices from the related object set -- none so far.
>>> q.choice_set.all()
<QuerySet []>

# Create three choices.
>>> q.choice_set.create(choice_text="Not much", votes=0)
<Choice: Not much>
>>> q.choice_set.create(choice_text="The sky", votes=0)
<Choice: The sky>
>>> c = q.choice_set.create(choice_text="Just hacking again", votes=0)

# Choice objects have API access to their related Question objects.
>>> c.question
<Question: What's up?>

# And vice versa: Question objects get access to Choice objects.
>>> q.choice_set.all()
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
>>> q.choice_set.count()
3

# The API automatically follows relationships as far as you need.
# Use double underscores to separate relationships.
# This works as many levels deep as you want; there's no limit.
# Find all Choices for any question whose pub_date is in this year
# (reusing the 'current_year' variable we created above).
>>> Choice.objects.filter(question__pub_date__year=current_year)
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>

# Let's delete one of the choices. Use delete() for that.
>>> c = q.choice_set.filter(choice_text__startswith="Just hacking")
>>> c.delete()



### More on this here: 
https://docs.djangoproject.com/en/4.2/ref/models/relations/




# allowed hosts should have a '*' in it in the settings.py
# change the timezone in the settings.py

# running server
python manage.py runserver

















# Note: remember to change the Database engine when pushing to  production
